{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","count","setCount","wordCount","txt","trimmedStr","trim","split","filter","word","length","Fragment","heading","onChange","event","newText","target","value","style","backgroundColor","color","rows","handleUpClick","toUpperCase","showAlert","handleLoClick","toLowerCase","handleExtraSpaces","join","handleClearClick","handleInverseClick","i","speak","msg","SpeechSynthesisUtterance","window","speechSynthesis","handleCopy","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","role","lower","charAt","slice","capitalize","defaultProps","about","App","setMode","setAlert","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.544b9f9c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className='container-fluid'>\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item active\">\r\n                            {/* <Link className=\"nav-link active\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link> */}\r\n                            <a className=\"nav-link active\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" to=\"/about\">{props.about}</Link> */}\r\n                        </li>\r\n                    </ul>\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='light'?'sleep':'light'} `}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode2}  type=\"checkbox\" id=\"flexSwitchCheckDefault 1\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Sleep Mode &nbsp;&nbsp;</label>\r\n                    </div> */}\r\n\r\n                    {/* Enable Dark Mode */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode}  type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// proptype: checks the datatype of props\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\n// default props: when we donot pass the value of props we use default props\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: \"About\"\r\n}\r\n// this component can be used for Navbar by simply importing the Navbar function from this module\r\n// import Navbar from './components/Navbar';","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handleInverseClick = () => {\r\n        let newText = \"\";\r\n        for (let i = text.length - 1; i >= 0; i--) {\r\n            newText += text[i];\r\n        }\r\n        setText(newText);\r\n        props.showAlert(\"Text is Inversed\", \"success\");\r\n    };\r\n\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        const newText = event.target.value;\r\n        setText(newText);\r\n        // any sort of change then that text will be counted for number of words\r\n        setCount(wordCount(newText));\r\n\r\n    }\r\n    // const [text, setText] = useState(\"Enter text here\");\r\n    const [text, setText] = useState(\"\");\r\n    // text=\"new text\" //wong way to change the state\r\n    // setText(\"new text\") //correct way to change the state\r\n\r\n\r\n\r\n    // ek state bnayi words count krne k liye so intially words will be 0\r\n    const [count, setCount] = useState(0);\r\n\r\n    // function bnaya words count krne k liye\r\n    const wordCount = (txt) => {\r\n        // Trim the string to remove leading and trailing whitespace\r\n        const trimmedStr = txt.trim();\r\n\r\n        // Check if the trimmed string is empty\r\n        if (trimmedStr === '') {\r\n            return 0;\r\n        }\r\n        // Split the string by spaces and filter out any empty strings from the result\r\n        const words = trimmedStr.split(/\\s+/).filter(word => word.length > 0);\r\n\r\n        // Return the length of the words array, which is the number of words\r\n        return words.length;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                {/* prop heading in curly braces */}\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" onChange={handleOnChange} id=\"myBox\" value={text} style={{ backgroundColor: props.mode === 'dark' ? '#121212' : 'white', color: props.mode === 'dark' ? 'white' : '#121212' }} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-danger mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-dark mx-2\" onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={handleClearClick}>Clear TextBox</button>\r\n                <button className=\"btn btn-info mx-2\" onClick={handleInverseClick}>Inverse Text</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={speak} >Speak</button>\r\n                <button className=\"btn btn-secondary mx-2\" onClick={handleCopy} >Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-2\">\r\n                <h4>Your text summary</h4>\r\n                <p> {count} words, {text.length} characters</p>\r\n                {/* words:- yha count state call hori h which will giveus the count*/}\r\n                <p>{0.008 * count} Minutes read</p>\r\n                {/* time taken to read a word is 0.008 * total words */}\r\n                <h5>Preview</h5>\r\n                <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview here!\"}</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n         // If props.alert is null, no div will be rendered. If it's not null, the div will be rendered.\r\n        // jb props.alert null hai tb hmko div nhi milega, if null nhi h true h den div milega\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);  //alert ek prop bnaya h hmne\n  const showAlert = (message, type) => {\n    // Basically hm setAlert mein object dalre hai\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#121212';\n      document.body.style.color = 'white';\n      // Title changes as you enable the dark mode\n      document.title = 'TextUtils - Dark Mode'\n      // showAlert(\"Dark mode had been enabled\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = '#e9ecef';\n      document.body.style.color = '#121212';\n      document.title = 'TextUtils - Light Mode'\n      // showAlert(\"Light mode had been enabled\", \"success\");\n    }\n  };\n  // const toggleMode2 = () => {\n  //   if (mode === 'light') {\n  //     setMode(\"sleep\");\n  //     document.body.style.backgroundColor = '#21275a';\n  //     document.body.style.color = 'white';\n  //     // showAlert(\"pink mode had been enabled\", \"success\");\n  //   }\n  //   else {\n  //     setMode(\"light\");\n  //     document.body.style.backgroundColor = '#e9ecef';\n  //     document.body.style.color = '#121212';\n  //     // showAlert(\"Light mode had been enabled\", \"success\");\n  //   }\n  // };\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        {/* <Navbar title=\"TextUtils\" about=\"About TextUtils\"/> */}\n        {/* yha mode ek prop hai jiske andr ek useState {mode} hai, this will take the value accordingly */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        {/* <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode2={toggleMode2} />  yha mode ek prop hai jiske andr ek useState {mode} hai, this will take the value accordingly */}\n        <Alert alert={alert} />\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n\n        {/* <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n          </Routes>\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n              }\n            />\n          </Routes>\n        </div > */}\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}