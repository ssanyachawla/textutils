{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","about","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","count","setCount","wordCount","txt","trimmedStr","trim","split","filter","word","length","Fragment","heading","onChange","event","newText","target","value","style","backgroundColor","color","rows","disabled","handleUpClick","toUpperCase","showAlert","handleLoClick","toLowerCase","handleExtraSpaces","join","handleClearClick","handleInverseClick","i","speak","msg","SpeechSynthesisUtterance","window","speechSynthesis","handleCopy","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","Alert","height","alert","role","lower","charAt","slice","capitalize","About","myStyle","aria-labelledby","data-parent","defaultProps","App","setMode","setAlert","BrowserRouter","body","Routes","Route","exact","path","element","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7fdf1bed.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className='container-fluid'>\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item active \">\r\n                            <Link className=\"nav-link active\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                            {/* <a className=\"nav-link active\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n                        </li>\r\n                        <li className=\"nav-item \">\r\n                            <Link className=\"nav-link active\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='light'?'sleep':'light'} `}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode2}  type=\"checkbox\" id=\"flexSwitchCheckDefault 1\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Sleep Mode &nbsp;&nbsp;</label>\r\n                    </div> */}\r\n\r\n                    {/* Enable Dark Mode */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode}  type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// proptype: checks the datatype of props\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\n// default props: when we donot pass the value of props we use default props\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: \"About\"\r\n}\r\n// this component can be used for Navbar by simply importing the Navbar function from this module\r\n// import Navbar from './components/Navbar';","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        // console.log(\"Uppercase was clicked\"+text);\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n\r\n    const handleInverseClick = () => {\r\n        let newText = \"\";\r\n        for (let i = text.length - 1; i >= 0; i--) {\r\n            newText += text[i];\r\n        }\r\n        setText(newText);\r\n        props.showAlert(\"Text is Inversed\", \"success\");\r\n    };\r\n\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text copied to clipboard\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        const newText = event.target.value;\r\n        setText(newText);\r\n        // any sort of change then that text will be counted for number of words\r\n        setCount(wordCount(newText));\r\n\r\n    }\r\n    // const [text, setText] = useState(\"Enter text here\");\r\n    const [text, setText] = useState(\"\");\r\n    // text=\"new text\" //wong way to change the state\r\n    // setText(\"new text\") //correct way to change the state\r\n\r\n\r\n\r\n    // ek state bnayi words count krne k liye so intially words will be 0\r\n    const [count, setCount] = useState(0);\r\n\r\n    // function bnaya words count krne k liye\r\n    const wordCount = (txt) => {\r\n        // Trim the string to remove leading and trailing whitespace\r\n        const trimmedStr = txt.trim();\r\n\r\n        // Check if the trimmed string is empty\r\n        if (trimmedStr === '') {\r\n            return 0;\r\n        }\r\n        // Split the string by spaces and filter out any empty strings from the result\r\n        const words = trimmedStr.split(/\\s+/).filter(word => word.length > 0);\r\n\r\n        // Return the length of the words array, which is the number of words\r\n        return words.length;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                {/* prop heading in curly braces */}\r\n                <h3 className='mb-2'>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" onChange={handleOnChange} id=\"myBox\" value={text} style={{ backgroundColor: props.mode === 'dark' ? '#121212' : 'white', color: props.mode === 'dark' ? 'white' : '#121212' }} rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-danger mx-2 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-dark mx-1 my-1\" onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n                <button disabled={text.length===0} className=\"btn btn-success mx-1 my-1\" onClick={handleClearClick}>Clear TextBox</button>\r\n                <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handleInverseClick}>Inverse Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-warning mx-1 my-1\" onClick={speak} >Speak</button>\r\n                <button disabled={text.length===0} className=\"btn btn-secondary mx-1 my-1\" onClick={handleCopy} >Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-2\">\r\n                <h4>Your text summary</h4>\r\n                {/* HARRYS METHOD */}\r\n                {/* This one says that jb hm text ko split kre then jo array hme return hora h it should not contain any empty spaces \r\n                for that we use filter function\r\n                filter ek arrow function leta h and if vo arrow function true return krta h den vo element array mein rehta h otherwise filter out ho jata h\r\n                so for elements jinki length 0 hai vo false hogya and the will be filtered from array */}\r\n                {/* <p> {text.split(\" \").filter((element)=>{return element.length!==0}).length} words, {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p> */}\r\n\r\n                {/* MY METHOD */}\r\n                <p> {count} words, {text.length} characters</p>\r\n                {/* words:- yha count state call hori h which will giveus the count*/}\r\n                <p>{0.008 * count} Minutes read</p>\r\n                {/* time taken to read a word is 0.008 * total words */}\r\n                <h5>Preview</h5>\r\n                <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'40px'}}>\r\n            {/*  If props.alert is null, no div will be rendered. If it's not null, the div will be rendered.\r\n             jb props.alert null hai tb hmko div nhi milega, if null nhi h true h den div milega */}\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    // usestate define ki hai for myStyle \r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n\r\n    // usestate define ki hai for btntext \r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n\r\n    // function toggleStyle bnaya h that affects the state of myStyle\r\n    // const toggleStyle= () => {\r\n    //     if (myStyle.color === 'white') {\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n\r\n    //         })\r\n    //         setBtnText(\"Enable Dark Mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n\r\n    //         })\r\n    //         setBtnText(\"Enable Light Mode\")\r\n    //     }\r\n\r\n\r\n    const myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark' ? 'rgb(36 44 55)' : 'white',\r\n        // border: '2px solid',\r\n        // borderColor: props.mode === 'dark' ? 'white' :'rgb(36 44 55)',\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className='container ' style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h2 className='my-3'>About Us</h2>\r\n            <div id=\"accordion\" >\r\n                <div className=\"card\" >\r\n                    <div className=\"card-header\" style={myStyle} id=\"headingOne\">\r\n                        <h5 className=\"mb-0\">\r\n                            <button className=\"btn btn-link \" style={myStyle} data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                <strong>Analyse Your Text</strong>\r\n                            </button>\r\n                        </h5>\r\n                    </div>\r\n\r\n                    <div id=\"collapseOne\" className=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            Textutils gives you a way to analyse your text quickly and effeciently. Be it word count, character count, copy your text, translate it and so much more.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\" style={myStyle} id=\"headingTwo\">\r\n                        <h5 className=\"mb-0\">\r\n                            <button className=\"btn btn-link collapsed\" style={myStyle} data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                <strong>Free To Use</strong>\r\n                            </button>\r\n                        </h5>\r\n                    </div>\r\n                    <div id=\"collapseTwo\" className=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            Textutils is a free character counter tool that provides instant character count and word count statistics for a givem text. Textutils reports the number of words and characters. Thus it is suitable for writing text with word/character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\" style={myStyle} id=\"headingThree\">\r\n                        <h5 className=\"mb-0\">\r\n                            <button className=\"btn btn-link collapsed\" style={myStyle} data-toggle=\"collapse\" data-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                <strong>Browser Compatible</strong>\r\n                            </button>\r\n                        </h5>\r\n                    </div>\r\n                    <div id=\"collapseThree\" className=\"collapse \" aria-labelledby=\"headingThree\" data-parent=\"#accordion\">\r\n                        <div className=\"card-body\" style={myStyle}>\r\n                            This word counter works in any web browser such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays etc.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"container my-3\">\r\n                    <button type=\"button\"  onClick={toggleStyle} className=\"btn btn-primary\">{btntext}</button>\r\n                </div> */}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');  //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);  //alert ek prop bnaya h hmne\n  const showAlert = (message, type) => {\n    // Basically hm setAlert mein object dalre hai\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#121212';\n      document.body.style.color = 'white';\n      // Title changes as you enable the dark mode\n      // document.title = 'TextUtils - Dark Mode'\n      // showAlert(\"Dark mode had been enabled\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = '#e9ecef';\n      document.body.style.color = '#121212';\n      // document.title = 'TextUtils - Light Mode'\n      // showAlert(\"Light mode had been enabled\", \"success\");\n    }\n  };\n  // const toggleMode2 = () => {\n  //   if (mode === 'light') {\n  //     setMode(\"sleep\");\n  //     document.body.style.backgroundColor = '#21275a';\n  //     document.body.style.color = 'white';\n  //     // showAlert(\"pink mode had been enabled\", \"success\");\n  //   }\n  //   else {\n  //     setMode(\"light\");\n  //     document.body.style.backgroundColor = '#e9ecef';\n  //     document.body.style.color = '#121212';\n  //     // showAlert(\"Light mode had been enabled\", \"success\");\n  //   }\n  // };\n  return (\n    <>\n      <BrowserRouter>\n        {/* <Navbar title=\"TextUtils\" about=\"About TextUtils\"/> */}\n        {/* yha mode ek prop hai jiske andr ek useState {mode} hai, this will take the value accordingly */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        {/* <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode2={toggleMode2} />  yha mode ek prop hai jiske andr ek useState {mode} hai, this will take the value accordingly */}\n        <Alert alert={alert} />\n        {/* <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} /> */}\n\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode}/>} />\n          </Routes>\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character Counter, Remove extra spaces\" mode={mode} />} />\n          </Routes>\n        </div >\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}